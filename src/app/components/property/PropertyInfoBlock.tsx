// PropertyInfoBlock.tsx
'use client';
import {
  Wifi, Snowflake, Car, Flame, BedDouble, Ruler, Building2,
  CigaretteOff, Clock, Refrigerator, Tv2, Shield, KeyRound
} from 'lucide-react';
import { useTranslation } from 'react-i18next';
import { useState } from 'react';

export type AmenityKey =
  | 'wifi'
  | 'washer'
  | 'parking'
  | 'balcony'
  | 'ac'
  | 'elevator'
  | 'heating'
  | 'furniture'
  | 'oven'
  | 'stove'
  | 'microwave'
  | 'fridge'
  | 'dishwasher'
  | 'boiler'
  | 'smarttv'
  | 'metro'
  | 'soundproof'
  | 'modern'
  | 'security'
  | 'concierge';

interface PropertyInfoBlockProps {
  rooms: number;
  area: number;
  floor: string;
  furnished: boolean;
  withChildren: boolean;
  withPets: boolean;
  smokingAllowed: boolean;
  longTerm: boolean;
  amenities: AmenityKey[];
}

export default function PropertyInfoBlock({
  rooms,
  area,
  floor,
  furnished,
  withChildren,
  withPets,
  smokingAllowed,
  longTerm,
  amenities,
}: PropertyInfoBlockProps) {
  const { t } = useTranslation();
  const [showAll, setShowAll] = useState(false);

  const amenityMap: Record<AmenityKey, { icon: React.ReactNode; label: string }> = {
    wifi: { icon: <Wifi className="w-5 h-5 text-orange-500" />, label: t('listing.description.amenities.wifi', 'Wi-Fi') },
    washer: { icon: <span className="text-orange-500">üß∫</span>, label: t('listing.description.amenities.washer', '–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞') },
    parking: { icon: <Car className="w-5 h-5 text-orange-500" />, label: t('listing.description.amenities.parking', '–ü–∞—Ä–∫–æ–≤–∫–∞') },
    balcony: { icon: <span className="text-orange-500">üõãÔ∏è</span>, label: t('listing.description.amenities.balcony', '–ë–∞–ª–∫–æ–Ω') },
    ac: { icon: <Snowflake className="w-5 h-5 text-orange-500" />, label: t('listing.description.amenities.ac', '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä') },
    elevator: { icon: <span className="text-orange-500">üõó</span>, label: t('listing.description.amenities.elevator', '–õ–∏—Ñ—Ç') },
    heating: { icon: <Flame className="w-5 h-5 text-orange-500" />, label: t('listing.description.amenities.heating', '–û—Ç–æ–ø–ª–µ–Ω–∏–µ') },
    furniture: { icon: <span className="text-orange-500">ü™ë</span>, label: t('listing.description.amenities.furniture', '–ú–µ–±–µ–ª—å') },
    oven: { icon: <span className="text-orange-500">üçû</span>, label: t('listing.description.amenities.oven', '–î—É—Ö–æ–≤–∫–∞') },
    stove: { icon: <span className="text-orange-500">üç≥</span>, label: t('listing.description.amenities.stove', '–í–∞—Ä–æ—á–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å') },
    microwave: { icon: <span className="text-orange-500">üì°</span>, label: t('listing.description.amenities.microwave', '–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞') },
    fridge: { icon: <Refrigerator className="w-5 h-5 text-orange-500" />, label: t('listing.description.amenities.fridge', '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫') },
    dishwasher: { icon: <span className="text-orange-500">üçΩÔ∏è</span>, label: t('listing.description.amenities.dishwasher', '–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞') },
    boiler: { icon: <span className="text-orange-500">üíß</span>, label: t('listing.description.amenities.boiler', '–ë–æ–π–ª–µ—Ä / –í–æ–¥–æ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å') },
    smarttv: { icon: <Tv2 className="w-5 h-5 text-orange-500" />, label: t('listing.description.amenities.smarttv', '–°–º–∞—Ä—Ç-–¢–í') },
    metro: { icon: <span className="text-orange-500">üöá</span>, label: t('listing.description.amenities.metro', '–ë–ª–∏–∑–æ—Å—Ç—å –∫ –º–µ—Ç—Ä–æ') },
    soundproof: { icon: <span className="text-orange-500">üîá</span>, label: t('listing.description.amenities.soundproof', '–®—É–º–æ–∏–∑–æ–ª—è—Ü–∏—è') },
    modern: { icon: <span className="text-orange-500">üèôÔ∏è</span>, label: t('listing.description.amenities.modern', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ñ–ö') },
    security: { icon: <Shield className="w-5 h-5 text-orange-500" />, label: t('listing.description.amenities.security', '–û—Ö—Ä–∞–Ω—è–µ–º–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è') },
    concierge: { icon: <KeyRound className="w-5 h-5 text-orange-500" />, label: t('listing.description.amenities.concierge', '–ö–æ–Ω—Å—å–µ—Ä–∂ / –æ—Ö—Ä–∞–Ω–∞') },
  };

  return (
    <div className="space-y-6">
        <p className="text-xl font-semibold text-foreground">
          {t('property.amenities.title', '–£—Å–ª–æ–≤–∏—è –∞—Ä–µ–Ω–¥—ã')}
        </p>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
        <InfoCard icon={<BedDouble className="w-6 h-6 text-orange-500" />} label={t('property.rooms', '–ö–æ–º–Ω–∞—Ç')} value={rooms} />
        <InfoCard icon={<Ruler className="w-6 h-6 text-orange-500" />} label={t('property.area', '–ü–ª–æ—â–∞–¥—å')} value={`${area} –º¬≤`} />
        <InfoCard icon={<Building2 className="w-6 h-6 text-orange-500" />} label={t('property.floor', '–≠—Ç–∞–∂')} value={floor} />
        <InfoCard icon={<span className="text-orange-500">üß≥</span>} label={t('property.furnished', '–ú–µ–±–ª–∏—Ä–æ–≤–∞–Ω–∞')} value={furnished ? '–î–∞' : '–ù–µ—Ç'} />
        <InfoCard icon={<span className="text-orange-500">üß∏</span>} label={t('property.children', '–° –¥–µ—Ç—å–º–∏')} value={withChildren ? '–†–∞–∑—Ä–µ—à–µ–Ω–æ' : '–ó–∞–ø—Ä–µ—â–µ–Ω–æ'} />
        <InfoCard icon={<span className="text-orange-500">üêæ</span>} label={t('property.pets', '–° –∂–∏–≤–æ—Ç–Ω—ã–º–∏')} value={withPets ? '–†–∞–∑—Ä–µ—à–µ–Ω–æ' : '–ó–∞–ø—Ä–µ—â–µ–Ω–æ'} />
        <InfoCard icon={<CigaretteOff className="w-6 h-6 text-orange-500" />} label={t('property.smoking', '–ö—É—Ä–µ–Ω–∏–µ')} value={smokingAllowed ? '–î–∞' : '–ù–µ—Ç'} />
        <InfoCard icon={<Clock className="w-6 h-6 text-orange-500" />} label={t('property.longTerm', '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è')} value={longTerm ? '–î–∞' : '–ù–µ—Ç'} />
      </div>

      <div className="space-y-6">
        <p className="text-xl font-semibold text-foreground">
          {t('property.amenities.title', '–£–¥–æ–±—Å—Ç–≤–∞')}
        </p>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
          {amenities.slice(0, showAll ? amenities.length : 4).map((key) => {
            const amenity = amenityMap[key];
            return (
              <InfoCard
                key={key}
                icon={amenity?.icon ?? <span className="text-orange-500">‚ùì</span>}
                label={amenity?.label ?? key}
                value=""
              />
            );
          })}
        </div>
        {amenities.length > 4 && (
          <button
            onClick={() => setShowAll(!showAll)}
            className="text-sm text-primary hover:underline mt-2"
          >
            {showAll ? t('property.amenities.hide', '–°–∫—Ä—ã—Ç—å —É–¥–æ–±—Å—Ç–≤–∞') : t('property.amenities.showAll', '–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —É–¥–æ–±—Å—Ç–≤–∞')}
          </button>
        )}
      </div>
    </div>
  );
}

function InfoCard({ icon, label, value }: { icon: React.ReactNode; label: string; value: string | number }) {
  return (
    <div className="flex items-start gap-3 p-4 rounded-2xl border border-muted bg-background shadow-sm">
      <div className="shrink-0">{icon}</div>
      <div className="space-y-0.5">
        <p className="text-sm font-medium text-foreground leading-none">{label}</p>
        {value !== '' && <p className="text-base text-muted-foreground">{value}</p>}
      </div>
    </div>
  );
}
