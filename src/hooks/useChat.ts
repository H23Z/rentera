'use client';

import { useEffect, useState, useCallback } from 'react';
import { db } from '@/app/firebase/firebase';
import {
  collection,
  doc,
  getDoc,
  setDoc,
  onSnapshot,
  addDoc,
  query,
  orderBy,
  serverTimestamp,
} from 'firebase/firestore';
import { Timestamp } from 'firebase/firestore'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Timestamp –∏–∑ Firebase

type Message = {
  id?: string;
  text: string;
  senderId: string;
  timestamp: Timestamp; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø Timestamp
  read: boolean;
  lastMessage?: string;
  lastUpdated?: Timestamp; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø Timestamp –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
};

export function useChat(currentUserId: string, otherUserId: string) {
  const [chatId, setChatId] = useState<string | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  // üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è chatId (uid1 + uid2 –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
  const generateChatId = useCallback(() => {
    return [currentUserId, otherUserId].sort().join('_');
  }, [currentUserId, otherUserId]);

  // üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
  const initChat = useCallback(async () => {
    const id = generateChatId();
    setChatId(id);

    const chatRef = doc(db, 'chats', id);
    const chatSnap = await getDoc(chatRef);

    if (!chatSnap.exists()) {
      await setDoc(chatRef, {
        participants: [currentUserId, otherUserId],
        lastMessage: '',
        lastUpdated: serverTimestamp(),
      });
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messagesRef = collection(db, 'chats', id, 'messages');
    const q = query(messagesRef, orderBy('timestamp', 'asc'));

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const msgs: Message[] = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...(doc.data() as Message),
      }));
      setMessages(msgs);
      setIsLoading(false);
    });

    return unsubscribe; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
  }, [currentUserId, otherUserId, generateChatId]);

  // ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = async (text: string) => {
    if (!chatId || !text.trim()) return;

    const message = {
      text,
      senderId: currentUserId,
      timestamp: serverTimestamp(),
      read: false,
    };

    try {
      await addDoc(collection(db, 'chats', chatId, 'messages'), message);
      await setDoc(
        doc(db, 'chats', chatId),
        {
          lastMessage: text,
          lastUpdated: serverTimestamp(),
        },
        { merge: true }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  };

  useEffect(() => {
    let unsubscribe: (() => void) | undefined;

    if (currentUserId && otherUserId) {
      initChat().then((unsub) => {
        unsubscribe = unsub;
      });
    }

    return () => {
      if (unsubscribe) {
        unsubscribe(); // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      }
    };
  }, [initChat, currentUserId, otherUserId]);

  return {
    messages,
    isLoading,
    sendMessage,
    chatId,
  };
}
